function bnet = mk_asia()
node = struct('asia', 1, ...
              'tub', 3, ...
              'smoke', 2, ...
              'lung', 4, ...
              'bronc', 5, ...
              'either', 6, ...
              'xray', 7, ...
              'dysp', 8);

adjacency = zeros(8);
adjacency([node.asia], node.tub) = 1;
adjacency([node.smoke], node.lung) = 1;
adjacency([node.smoke], node.bronc) = 1;
adjacency([node.lung node.tub], node.either) = 1;
adjacency([node.either], node.xray) = 1;
adjacency([node.either node.bronc], node.dysp) = 1;

value = {{'yes'; 'no'}, ...
         {'yes'; 'no'}, ...
         {'yes'; 'no'}, ...
         {'yes'; 'no'}, ...
         {'yes'; 'no'}, ...
         {'yes'; 'no'}, ...
         {'yes'; 'no'}, ...
         {'yes'; 'no'}};

bnet = mk_bnet(adjacency, [2 2 2 2 2 2 2 2]);
bnet.CPD{node.asia} = tabular_CPD(bnet, node.asia, [0.01 0.99]);
bnet.CPD{node.tub} = tabular_CPD(bnet, node.tub, [0.05 0.01 0.95 0.99]);
bnet.CPD{node.smoke} = tabular_CPD(bnet, node.smoke, [0.5 0.5]);
bnet.CPD{node.lung} = tabular_CPD(bnet, node.lung, [0.1 0.01 0.9 0.99]);
bnet.CPD{node.bronc} = tabular_CPD(bnet, node.bronc, [0.6 0.3 0.4 0.7]);
bnet.CPD{node.either} = tabular_CPD(bnet, node.either, [1.0 1.0 1.0 0.0 0.0 0.0 0.0 1.0]);
bnet.CPD{node.xray} = tabular_CPD(bnet, node.xray, [0.98 0.05 0.02 0.95]);
bnet.CPD{node.dysp} = tabular_CPD(bnet, node.dysp, [0.9 0.7 0.8 0.1 0.1 0.3 0.2 0.9]);
end
